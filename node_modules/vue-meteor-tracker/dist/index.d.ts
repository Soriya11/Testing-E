import { Meteor } from 'meteor/meteor';
import { App, ComputedRef } from 'vue';
export declare const config: {
    subscribe: typeof Meteor.subscribe;
};
interface Stoppable {
    stop: () => void;
}
export interface AutorunEffect<TResult> extends Stoppable {
    result: ComputedRef<TResult>;
}
declare function autorun<TResult = unknown>(callback: () => TResult): AutorunEffect<TResult>;
export interface ReactiveMeteorSubscription extends Stoppable {
    ready: ComputedRef<boolean>;
    sub: Meteor.SubscriptionHandle;
}
declare function subscribe(payload: string | (() => [name: string, ...args: any[]] | false), ...args: any[]): ReactiveMeteorSubscription;
export declare const useAutorun: () => {
    autorun: typeof autorun;
};
export declare const useSubscribe: () => {
    subscribe: typeof subscribe;
};
declare const setupOnlyAutorun: typeof autorun;
declare const setupOnlySubscribe: typeof subscribe;
export { setupOnlyAutorun as autorun, setupOnlySubscribe as subscribe, };
export declare function callMethod<TResult = any>(methodName: string, ...args: any[]): Promise<TResult>;
export declare type MethodResultCallback<TResult = any> = (error: Error | undefined, result: TResult | undefined) => unknown;
export declare function useMethod<TArgs extends any[] = any[], TResult = any>(name: string): {
    call: (...args: TArgs) => Promise<TResult>;
    pending: import("vue").Ref<boolean>;
    error: import("vue").Ref<Error>;
    result: import("vue").Ref<TResult>;
    onResult: (callback: MethodResultCallback<TResult>) => void;
};
export declare const VueMeteor: {
    install(app: App): void;
};
